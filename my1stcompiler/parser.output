Terminals unused in grammar

   COLON
   NUMBER_TYPE
   STRING_TYPE
   BOOLEAN_TYPE
   CLASS_IDENTIFIER
   STRING
   TRUE
   FALSE
   CONSOLE_LOG
   VAR
   CONST
   RETURN
   FUNCTION
   LBRACKET
   RBRACKET
   LBRACE
   RBRACE
   LPARENTHESES
   RPARENTHESES
   COMMA
   SINGLE_QUOTE
   ADD
   MINUS
   DOT
   DOUBLE_QUOTE
   MULT
   DIV
   EXP
   GT
   LT
   EQ
   BACKTICK
   DOLLAR
   REAL
   NUMERO
   BOOLEAN
   ERROR_LITERAL
   ANY_TYPE
   SUB
   MUL
   LPAREN
   RPAREN
   CRASIS_QUOTE
   '-'
   '+'
   '*'
   '/'
   '^'
   '>'
   '<'
   '='


Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: variavel_declaration SEMICOLON
    3             | declarations variavel_declaration SEMICOLON

    4 $@1: %empty

    5 variavel_declaration: LET IDENTIFIER ASSIGN $@1 expression

    6 expression: NUMBER
    7           | FLOAT


Terminals, with rules where they appear

$end (0) 0
'*' (42)
'+' (43)
'-' (45)
'/' (47)
'<' (60)
'=' (61)
'>' (62)
'^' (94)
error (256)
LET (258) 5
COLON (259)
NUMBER_TYPE (260)
STRING_TYPE (261)
ASSIGN (262) 5
SEMICOLON (263) 2 3
BOOLEAN_TYPE (264)
CLASS_IDENTIFIER (265)
NUMBER (266) 6
FLOAT (267) 7
STRING (268)
IDENTIFIER (269) 5
TRUE (270)
FALSE (271)
CONSOLE_LOG (272)
VAR (273)
CONST (274)
RETURN (275)
FUNCTION (276)
LBRACKET (277)
RBRACKET (278)
LBRACE (279)
RBRACE (280)
LPARENTHESES (281)
RPARENTHESES (282)
COMMA (283)
SINGLE_QUOTE (284)
ADD (285)
MINUS (286)
DOT (287)
DOUBLE_QUOTE (288)
MULT (289)
DIV (290)
EXP (291)
GT (292)
LT (293)
EQ (294)
BACKTICK (295)
DOLLAR (296)
REAL (297)
NUMERO (298)
BOOLEAN (299)
ERROR_LITERAL (300)
ANY_TYPE (301)
SUB (302)
MUL (303)
LPAREN (304)
RPAREN (305)
CRASIS_QUOTE (306)


Nonterminals, with rules where they appear

$accept (60)
    on left: 0
program (61)
    on left: 1, on right: 0
declarations (62)
    on left: 2 3, on right: 1 3
variavel_declaration (63)
    on left: 5, on right: 2 3
$@1 (64)
    on left: 4, on right: 5
expression (65)
    on left: 6 7, on right: 5


State 0

    0 $accept: . program $end

    LET  shift, and go to state 1

    program               go to state 2
    declarations          go to state 3
    variavel_declaration  go to state 4


State 1

    5 variavel_declaration: LET . IDENTIFIER ASSIGN $@1 expression

    IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: declarations .
    3 declarations: declarations . variavel_declaration SEMICOLON

    LET  shift, and go to state 1

    $default  reduce using rule 1 (program)

    variavel_declaration  go to state 7


State 4

    2 declarations: variavel_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 8


State 5

    5 variavel_declaration: LET IDENTIFIER . ASSIGN $@1 expression

    ASSIGN  shift, and go to state 9


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 declarations: declarations variavel_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 10


State 8

    2 declarations: variavel_declaration SEMICOLON .

    $default  reduce using rule 2 (declarations)


State 9

    5 variavel_declaration: LET IDENTIFIER ASSIGN . $@1 expression

    $default  reduce using rule 4 ($@1)

    $@1  go to state 11


State 10

    3 declarations: declarations variavel_declaration SEMICOLON .

    $default  reduce using rule 3 (declarations)


State 11

    5 variavel_declaration: LET IDENTIFIER ASSIGN $@1 . expression

    NUMBER  shift, and go to state 12
    FLOAT   shift, and go to state 13

    expression  go to state 14


State 12

    6 expression: NUMBER .

    $default  reduce using rule 6 (expression)


State 13

    7 expression: FLOAT .

    $default  reduce using rule 7 (expression)


State 14

    5 variavel_declaration: LET IDENTIFIER ASSIGN $@1 expression .

    $default  reduce using rule 5 (variavel_declaration)
